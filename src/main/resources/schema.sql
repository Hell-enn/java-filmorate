DROP TABLE IF EXISTS likes;
DROP TABLE IF EXISTS friendship;
DROP TABLE IF EXISTS genre_film;
DROP TABLE IF EXISTS rating_film;
DROP TABLE IF EXISTS film;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS genre;
DROP TABLE IF EXISTS rating;



CREATE TABLE IF NOT EXISTS genre (
    genre_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(200)
);



CREATE TABLE IF NOT EXISTS rating (
    rating_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(15) NOT NULL,
    description VARCHAR(200)
);


CREATE TABLE IF NOT EXISTS film (
    film_id  INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(200),
    description VARCHAR(1500),
    release_date DATE,
    duration INTEGER
);


CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email VARCHAR(200),
    login VARCHAR(200),
    name VARCHAR(200),
    birthday DATE,
    CONSTRAINT chk_not_blank CHECK (email <> '' AND name <> '')
);


ALTER TABLE users
ADD UNIQUE (login);



CREATE TABLE IF NOT EXISTS genre_film (
    film_id INTEGER REFERENCES film(film_id),
    genre_id INTEGER REFERENCES genre(genre_id),
    PRIMARY KEY (film_id, genre_id)
);



CREATE TABLE IF NOT EXISTS rating_film (
    film_id INTEGER PRIMARY KEY,
    rating_id INTEGER REFERENCES rating(rating_id)
);



CREATE TABLE IF NOT EXISTS likes (
    film_id INTEGER,
    user_id INTEGER,
    PRIMARY KEY (film_id, user_id)
);



CREATE TABLE IF NOT EXISTS friendship (
    following_user_id INTEGER,
    followed_user_id INTEGER,
    accept BOOLEAN DEFAULT FALSE,
    PRIMARY KEY (following_user_id, followed_user_id)
);
